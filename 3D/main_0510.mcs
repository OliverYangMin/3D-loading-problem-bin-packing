require 'Box'
require 'Layer'
require 'Space'
require 'functions'

function main()
    math.randomseed(7)
    readBischooff(7)
    container = Space:new({0, 0, 0}, {W, H, D}, true)
    for p=1,1 do--PSIZE do
        local starttime, used_volume = os.time(), 0
        init(p)    
        repeat
            table.sort(empty, compareSpace)             
            local layer = empty[1]:chooseBestLayer()    
            if layer.volume == 0 then break end
            empty[1]:setLayerPosition(layer)                        
            packed[#packed+1] = layer
            layer:draw(); layer:pos(); layer:cutBox();Update(m3d);Sleep(10)
            boxes[layer.tp]:reduce(layer.num)
            used_volume = used_volume + layer.volume
            
            local spaces = empty[1]:createMaxSpace(layer) 
            table.remove(empty, 1) 
          
            layer:cutOverlapSpace()   
            
            for s=1,#spaces do 
                if not spaces[s]:isBeContainedByEmpty() then
                    empty[#empty+1] = spaces[s] 
                end
            end --- 检验1 是否被其他空间包围
            
            for i=#empty,1,-1 do
                if empty[i]:isTooSmall() then
                    table.remove(empty,i)
                end 
            end --- 检验2 是否太小
            
        until isNoLeft() or #empty == 0 
        outputResult(used_volume, starttime)
    end 
end 

main()